/******************************************************************************
Ejercicios Aggregate
Morel, Melany Lucía

1. (Peliculas) Encontrar todas las películas cuyo lenguaje sea italiano ‘it’.
*******************************************************************************/
db.films.aggregate([{$match: {original_language : "it"}}, {$project: {original_title: 1, original_language : 1}}]).pretty()

/******************************************************************************
 * 2. Encontrar todas las películas cuyo lenguaje sea italiano ‘it’ y la popularidad mayor a 7
 ********************************************************************************/
 db.films.aggregate([{$match: {$and: [{original_language : "it", popularity: {$gt: 7}}]}}, {$project: {original_title: 1, original_language : 1, popularity: 1}}]).pretty()
 /******************************************************************************
 * 3. Encontrar todas las películas cuyo lenguaje sea italiano ‘it’, popularidad mayor a 12 y mostrar el _id, title, vote_average y cast.
 ********************************************************************************/
  db.films.aggregate([{$match: {$and: [{original_language : "it", popularity: {$gt: 12}}]}}, {$project: {_id: 1, title: 1, vote_average: 1, cast: 1}}]).pretty()
 /******************************************************************************
 * 4. Sumar al punto anterior un campo que se llame votos que contenga la cantidad devotos.
 ********************************************************************************/
   db.films.aggregate([{$match: {$and: [{original_language : "it", popularity: {$gt: 12}}]}}, {$project: {_id: 1, title: 1, vote_average: 1, cast: 1, "votos": "$vote_count"}}]).pretty()
  /******************************************************************************
 * 5. Repetir la búsqueda anterior, pero restringir el array cast a los tres primeros elementos.
 ********************************************************************************/
 db.films.aggregate([{$match: {$and: [{original_language : "it", popularity: {$gt: 12}}]}}, {$project: {_id: 1, title: 1, vote_average: 1, cast:{$slice:["$cast",3]}, "votos": "$vote_count"}}]).pretty()
 /******************************************************************************
 * 6. Repetir la búsqueda anterior, pero mostrar cuatro elementos a partir de la tercera posición
 ********************************************************************************/
 db.films.aggregate([{$match: {$and: [{original_language : "it", popularity: {$gt: 12}}]}}, {$project: {_id: 1, title: 1, vote_average: 1, cast:{$slice:["$cast", 3, 4]}, "votos": "$vote_count"}}]).pretty()
 /******************************************************************************
 * 7. Mostrar todas las películas en idioma espanol, mostrando el t
 ********************************************************************************/
 db.films.aggregate([{$match: {original_language : "es"}}, {$project: {title: 1, original_language : 1}}]).pretty()
  /******************************************************************************
 * 8. Mostrar el _id, title, y crear un campo de nombre cantidad con la cantidad de elementos en el array cast de las peliculas en espanol.
 ********************************************************************************/
  db.films.aggregate([{$match: {original_language : "es"}}, {$project: {_id : 1, title: 1, "cantidad": {$size: "$cast"}}}]).pretty()
  /******************************************************************************
 * 9. Buscar la película con _id 58fa4a7799315a42d17d2b50 y mostrar, el titulo, original_title, actor con el valor de cast.name y personaje con el valor de
  cast.character de cada elemento del array cast. Mostrar un documento por cada elemento que contenga el array.
 ********************************************************************************/
   db.films.aggregate([{$match: {_id : ObjectId("58fa4a7799315a42d17d2b50")}}, {$unwind: "$cast"}, {$project: {title: 1, original_title: 1, "actor": "$cast.name", "personaje":"$cast.character"}}]).pretty()
   /******************************************************************************
 * 10. Mostrar el nombre de todos los actores que interpretaron a Stormtrooper y la película.
 ********************************************************************************/
 db.films.aggregate([{$unwind: "$cast"}, {$match: {"cast.character" : "Stormtrooper"}},  {$project: {original_title: 1, "actor": "$cast.name", "personaje":"$cast.character"}},{$sort: { actor: 1} }]).pretty()
    /******************************************************************************
 *  11. Mostrar la cantidad de resultados de la búsqueda anterior : 35
 ********************************************************************************/
 db.films.aggregate([{$unwind: "$cast"}, {$match: {"cast.character" : "Stormtrooper"}},  {$project: {original_title: 1, "actor": "$cast.name", "personaje":"$cast.character"}}, {$count: "personaje"}])
    /******************************************************************************
 *  12. Mostrar sólo los actores del punto 10, sin repetir actores.
 ********************************************************************************/
db.films.aggregate([{$unwind:"$cast"},{$match:{"cast.character":"Stormtrooper"}},{$project:{original_title:1,"actor":"$cast.name"}},{$group:{_id:{actor:"$actor"}}}]).pretty()




/*
	Ejercicios geo-espaciales.
	
	*AGREGO EJERCICIO 9, no lo había visto

	Morel, Melany Lucía.
*/

//1. Crear índices 2dsphere en las colecciones: containers, oceans, ships,
//countries y wines.

containers.createIndex({geometry:'2dsphere'})
oceans.createIndex({geometry:'2dsphere'})
ships.createIndex({geometry:'2dsphere'})
countries.createIndex({geometry:'2dsphere'})
wines.createIndex({geometry:'2dsphere'})

//2. Encontrar el nombre del país en el que está contenido el punto lat -2.112018,
//lng 9.748100.

db.countries.find({geometry:{$geoIntersects:{$geometry:{type:"Point",coordinates:[9.748100,-2.112018]}}}},{"properties.name":1}) //Gabon

//3. Encontrar cuantas bodegas existen a 200 kilómetros del punto
//-58.5737513, -34.6156537.

db.wines.find({geometry: {$near:{$geometry:{type : "Point", coordinates : [-58.5737513, -34.6156537], $maxDistance: 2000}}}},{"properties.name":1}).count() //1083

//4. Contar cuántas bodegas existen en el polígono dado. .

db.wines.find({ geometry:{ $geoWithin: { $geometry:{type : "Polygon", coordinates : [[[-51, -29], [-71, -29], [-71,-33], [-51, -33],[-51, -29]]]}}}}, {"properties.name":1}).count() //10

//5. Encontrar el nombre del mar/océano del punto
//[82.19970703125, 8.559293903302025].

db.oceans.find({ geometry: { $geoIntersects: { $geometry: { type: "Point", coordinates: [82.19970703125, 8.559293903302025]}}}}, {name:1}) //Bay of Bengal

//6. Calcular cuántos barcos se encuentran a una distancia de 60 kilómetros del
//barco de nombre "MSC Zoe" que hayan sido construidos después del 2014.

db.ships.createIndex(location:"2dsphere")

var barco = db.ships.findOne({Name:"MSC Zoe"})
db.ships.find({location:{$near:{$geometry:barco.location,$maxDistance:60000}}},{Built:{$gt:2014}}).count() //1

//7. Contar cuantos containers hay en "Philippine Sea"

db.containers.createIndex(location:"2dsphere")

var sea = db.oceans.findOne({name:"Philippine Sea"})

db.containers.find({location:{$geoWithin:{$geometry:sea.geometry}}}).count() //39172
//8. Calcular los barcos suizos que están en el océano pacifico sur y sean
//de nacionalidad Suiza o Kuwaití.

var oceanoPacificoSur = db.oceans.findOne({name:"SOUTH PACIFIC OCEAN"})
db.ships.find({ location:{ $geoWithin: { $geometry: {type: "MultiPolygon", coordinates: oceanoPacificoSur.geometry.coordinates}}}, $or: [{ Country: "Switzerland" }, { Country: "Kuwait" }]}).count() //4

/*9-
Mostrar cuántos barcos hay en este polígono {
    "type": "Polygon",
    "coordinates": [[
[-66,-39],

[-71,-66],

[-55,-45],

[-31,-40],

[-66,-39]]]
}
*/

db.ships.find({location:{$geoWithin:{$geometry:{type: "Polygon", coordinates: [[[-66,-39],[-71,-66],[-55,-45],[-31,-40],[-66,-39]]]}}}}).count()
------------------CREANDO VIEWS------------------

/*
conn = new Mongo();
db = conn.getDB("db2");

var stage = [];
stage.push({
	$lookup:{
		from:"containers",
		localField:"Name",
		foreignField:"shipName",
		as:"contenedores"
	}
});

stage.push({
	$out:"vista01"
});

var cursor = db.getCollection("ships").aggregate(stage);

printjson(cursor.toArray());

*/

/*
conn = new Mongo();
db = conn.getDB("db2");

db.ships.aggregate([
{
    $lookup:
    {
        from:'containers',
        foreignField:'shipName',
        as:'contenedores',
        localField:'Name'
    }
},
{
    $out:"vista02"
}
]);
*/

conn = new Mongo();
db = conn.getDB("db2");

db.ships.aggregate([{
    $lookup: {
        from: 'containers',
        as: 'contenedores',
        let: { shipName: "$Name" },
        pipeline: [
            {
                $match: {
                    $expr: {
                        $and: {
                            $eq: ['$shipName', '$$shipName']
                        }
                    }
                }
            },
            {
                $project: {
                    Tons: 1
                }
            }
        ]
    }
},
{
	$out:"vista03"
}
]);

-----------------EJERCICIOS LOOKUP-------------------
/*
EJERCICIOS LOOKUP

Morel, Melany Lucía.
*/
/*
conn = new Mongo();
db = conn.getDB("db2");
*/
//1. Traer todos los barcos con un array “cargo” con los contenedores que transporta.
/*
db.ships.aggregate([{
    $lookup: {
		from:"containers",
		localField:"Name",
		foreignField:"shipName",
		as:"cargo"
    }
},
{
	$out:"vistaEjercicio1"
}
]);
*/
//2. Traer el barco de nombre “MSC Zoe” con un array “cargo” con todos sus containers.
/*
db.ships.aggregate([
    {
        $match: { Name: "MSC Zoe" }
    },
    {
    $lookup: {
		from:"containers",
		as:"cargo",
        foreignField:"shipName",
        localField:"Name",
    }
},
    {
        $out:"vistaEjercicio2"
    }
]);
*/
//3. Traer todos los barcos que sean de Switzerland con sus contenedores.
/*
db.ships.aggregate([
    {
        $match: { Country: "Switzerland" }
    },
    {
    $lookup: {
        from:"containers",
        as:"cargo",
        foreignField:"shipName",
        localField:"Name",
    }
},
    {
        $out:"vistaEjercicio3"
    }
]);
*/
//4. Calcular la cantidad de contenedores que transporta el buque “MSC Zoe”.
/*
printjson(db.ships.aggregate([
    {
        $match: { Name: "MSC Zoe" }
    },
    {
        $lookup: {
            from:"containers",
            as:"cargo",
            foreignField:"shipName",
            localField:"Name",
        }
    },
    {
        $project: {contadorContenedores: { $size: "$cargo" }}
    }
]).toArray()); //11372
*/
//5. Traer todos los barcos y la cantidad de contenedores que transporta cada uno y
//ordenarlo de mayor a menor.
/*
printjson(db.ships.aggregate([
    {
        $lookup: {
            from:"containers",
            as:"cargo",
            foreignField:"shipName",
            localField:"Name",
        }
    },
    {
        $project: {barco: "$Name", contadorContenedores: { $size: "$cargo" }}
    },
    {
        $sort: { contadorContenedores: -1 }
    }
]).toArray());
*/
//6. Calcular el promedio de toneladas de los containers que transporta cada barco de
//nacionalidad “China”.
/*
printjson(db.ships.aggregate([
    {
        $match: { Country: "China" }
    },
    {
        $lookup: {
            from:"containers",
            as:"cargo",
            foreignField:"shipName",
            localField:"Name",
        }
    },
    {
        $project: {_id:"$Name", promedioTonsContainers: {$avg: "$cargo.Tons"} }
    }
]).toArray());
*/
//7. Calcular el promedio de toneladas de los containers que transportan los barcos de
//nacionalidad “China”.
/*
printjson(db.ships.aggregate([
    {
        $match: { Country: "China" }
    },
    {
        $lookup: {
            from:"containers",
            as:"cargo",
            foreignField:"shipName",
            localField:"Name",
        }
    },
    {
        $project: {_id:"$Name", promedioTonsContainers: {$avg: "$cargo.Tons"} }
    },
    {
        $group: {_id: "Barcos", promedioTonsGeneral : {$avg: "$promedioTonsContainers"}}
    }
]).toArray());
*/
//8. Calcular el promedio de toneladas de los tipos de containers que transporta cada
//barco de nacionalidad “China”
/*
printjson(db.ships.aggregate([
    {
        $match: { Country: "China" }
    },
    {
        $lookup:
        {
           from:'containers',
           as:'cargo',
           let: { barco: "$Name" },
           pipeline: [
               {
                   $match: {
                       $expr: {
                           $and: {
                               $eq: ['$shipName', '$$barco']
                           }
                       }
                   }
               },
               {
                    $group: {_id: "$type", promTonsTipo: {$avg: "$Tons"}}
               }
           ],
        }
    }
]).toArray());
*/

//9. Calcular el promedio de “Length overall (m)” de los barcos según país de
//origen(route) y la cantidad de contenedores que transportan.
/*
printjson(db.ships.aggregate([
{
 $lookup:{
     from: "containers", 
     as: "cargo", 
     localField: "Name",
     foreignField: "shipName"},
 },
 {
    $project: {
        route:1, "Length overall (m)":1, contenedores: {$size: "$cargo"}
    }
},
{
    $group: {
        _id: "$route.origin.Country", longitud: {$avg:"$Length overall (m)"}, contenedores: { $sum: "$cant" } 
    }
} 
]).toArray());
*/
//10. Calcular la cantidad de contenedores transportados por barcos chinos que están a
//una distancia máxima de 800 km del punto [129.15693498213182,
//18.108558232731916].
/*
db.ships.dropIndexes();
db.ships.createIndex({location:"2dsphere"});

printjson(db.ships.aggregate([
{
  $geoNear:{near:{type : "Point", coordinates : [129.15693498213182, 18.108558232731916]}, distanceField:"distancia", maxDistance:800000}
},
{
    $match: { Country: "China"}
},
{
    $lookup: {
        from:"containers",
        as:"cargo",
        foreignField:"shipName",
        localField:"Name",
    }
},
{
     $project: {cantContenedores: {$size: "$cargo" }}
},
{
    $group: {_id: "barcos", sumaContenedores: {$sum: "$cantContenedores"}}
}
]).toArray()); // 7629
*/

-----------------EJERCICIOS DB PRIVILEGES---------
//1. Iniciar una instancia de MongoDB con autentificación.

mongod --auth

//2. Conectarse a la consola mongo con autentificación. 

mongo --port 27017 -u "lucia" -p "1234" --authenticationDatabase "test"

//3. Conectarse a la consola mongo sin seguridad y autentificarse en la BD. 

mongod
mongo
db.auth("lucia", "1234")

//4. Crear un usuario administrador con el rol userAdminAnyDatabase. 

use admin 
db.createUser( 
 { 
 user: "admin", 
 pwd: "admin", 
 roles: [ { role: "userAdminAnyDatabase", db: "admin" }] 
 } 
) 

//5. Crear un usuario de nombre visita con clave 123 con rol read. 

use test
db.createUser( 
 { 
 user: "visita", 
 pwd: "123", 
 roles: [ { role: "read", db: "test" }] 
 } 
) 

//6. Crear un usuario de nombre tester con roles read y readWrite. 

use test
db.createUser( 
 { 
 user: "tester", 
 pwd: "123", 
 roles: [ { role: "read", db: "test" }, { role: "readWrite", db: "test" }]}) 

//7. Agregar el rol readWrite al usuario visita. 

db.grantRolesToUser("visita", [{role: "readWrite", db: "test"}])

//8. Quitar el rol readWrite al usuario tester. 

db.revokeRolesFromUser("tester", [{role: "readWrite", db: "test"}])

//9. Crear un usuario con roles de administrador. 

use test
db.createUser(
	{
		user: "admin",
		pwd: "abc123",
		roles: [{role: "dbAdmin", db: "test"}, {role: "userAdmin", db: "test"}]
	}
)

//10. Obtener un listado de todos los usuarios de la colección.

db.getUsers()


//11. Obtener los datos del usuario tester. 

db.getUser("tester")

//12. Cambiar la clave del usuario visita. 

db.changeUserPassword("visita", "clavenueva") 

//13. Crear un rol de nombre all con los roles read y readWrite. 

db.createRole(
	{
		role: "all",
		privileges: [
			{
				resource: {db: "test", collection: ""},
				actions: ["find"]
			}
		],
		roles: [
			{
				role: "read",
				db: "test"
			},
			{
				role: "readWrite",
				db: "test"
			}
		]
	}
)

//14. Crear el rol leer que sólo permita ejecutar la sentencia find(). 

db.createRole(
	{
		role: "leer",
		privileges: [
			{
				resource: {db: "test", collection: ""},
				actions: ["find"]
			}
		],
		roles: []
	}
)


//15. Obtener un listado de todos los roles de la BD. 

db.getRoles()


//16. Obtener los datos del rol leer. 

db.getRole("leer")


//17. Agregar al rol leer el permiso para ejecutar el método update(). 

db.grantPrivilegesToRole("leer", [{ resource: {db: "test", collection: ""}, actions:["update"]}])

//18. Borrar el rol leer. 

db.revokePrivilegesFromRole("leer", [{ resource: {db: "test", collection: ""},actions : ["update"]}])

//19. Borrar al usuario tester. 

db.dropUser("tester")



/******************************************************************************
Ejercicios de repaso SP 

Morel, Melany Lucía
*******************************************************************************/
//---------Base de datos Películas
//conn = new Mongo();
//db = conn.getDB("films1");
//peliculas = db.films;

//1. Mostrar la cantidad de películas por idioma 
/*
printjson(peliculas.aggregate(
		{
			$project: {original_language : 1}
		},
		{
			$group: {_id : "$original_language", cantidad : {$sum : 1}}
		}).pretty().toArray());
*/
//2. Mostrar la cantidad de películas que tiene más votos que el promedio. RESPUESTA: 16278 
/*
printjson(peliculas.aggregate(
		{
			$project: {nombre : "$original_title", votos: "$vote_count", promedio: "$vote_average"}
		},
		{
			$match: {
				$expr:{
					$gt:["$votos", "$promedio"]
				}
			}
		},
		{
			$count: "cantidad"
		}
		).pretty().toArray());
*/
//3. Mostrar los actores de la película más votada.	RESPUESTA: actores de inception

/*
printjson(peliculas.aggregate(
		{
			$project: {nombre : "$original_title", votos: "$vote_count", actores: "$cast"}
		},
		{
			$sort: { votos: -1 }
		},
		{
			$limit: 1
		}
		).pretty().toArray());
*/

//---------Base de datos de wines ,Containers y countries 
/*conn = new Mongo();

dbContainers = conn.getDB("db2");
db = conn.getDB("test");

wines = db.wines;
countries = db.countries;
containers = dbContainers.containers;
ships = dbContainers.ships;
*/
//4. ¿Cual es la bodega más cercana a la facu? 
/*
printjson(wines.find(
			{
			geometry: {
						$near:{
								$geometry: {type : "Point", coordinates : [-58.364859, -34.662456]}
							   }
					  }
		    },
		    {"properties.name":1}
		    ).toArray());
*/

//5. ¿Cuántos barcos hay en el mar argentino?  RESPUESTA: 2

//printjson(ships.find({location:{$geoWithin:{$geometry:{type: "Polygon", coordinates: [[[-66,-39],[-71,-66],[-55,-45],[-31,-40],[-66,-39]]]}}}}).count());

//6. Podemos saber qué países están a menos de 2000km de la facu? RESPUESTA: Arg, uruguay, brazil, paraguay, chile, bolivia, fakland islands, peru...
/*
printjson(countries.find(
			{
			geometry: {
						$near:{
								$geometry: {type : "Point", coordinates : [-58.364859, -34.662456]}
							   }
					  }
		    },
		    {"properties.name":1}
		    ).limit(8).toArray());
*/
//Base de datos repaso 
//conn = new Mongo();
//test = conn.getDB("test");

//1. Crear un usuario con roles de administrador 
/*
test.createUser( 
 { 
 user: "usuarioAdministradorRepaso", 
 pwd: "admin", 
 roles: [ { role: "dbAdmin", db: "admin" }] 
 } 
) 
*/

//7. Crear un rol de nombre all con los roles read y readWrite. 
/*
test.createRole(
	{
		role: "allRepaso",
		privileges: [
			{
				resource: {db: "test", collection: ""},
				actions: ["find"]
			}
		],
		roles: [
			{
				role: "read",
				db: "test"
			},
			{
				role: "readWrite",
				db: "test"
			}
		]
	}
)*/
